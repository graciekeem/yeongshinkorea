// =========================================================
// General JavaScript Functions (script.js)
// =========================================================

document.addEventListener("DOMContentLoaded", function() {
    
    // ---------------------------------------------------------
    // 1. Fade-in & Intersecting Observer
    // ---------------------------------------------------------
    const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                // ÏùºÎ∞ò fade-in Ïï†ÎãàÎ©îÏù¥ÏÖò
                if (entry.target.classList.contains('fade-in')) {
                    entry.target.classList.add('is-visible');
                }
                // Î∞îÏù¥Ïñ¥ Í∞§Îü¨Î¶¨ Ïï†ÎãàÎ©îÏù¥ÏÖò (ÏàúÏ∞®Ï†Å Îì±Ïû•)
                if (entry.target.classList.contains('buyer-gallery')) {
                    entry.target.classList.add('is-visible');
                }
                
                observer.unobserve(entry.target);
            }
        });
    }, {
        rootMargin: '0px',
        threshold: 0.1 
    });

    // fade-in ÌÅ¥ÎûòÏä§ÏôÄ buyer-gallery ÌÅ¥ÎûòÏä§ Î™®Îëê Í¥ÄÏ∞∞ ÎåÄÏÉÅÏóê Ï∂îÍ∞Ä
    document.querySelectorAll('.fade-in, .buyer-gallery').forEach(el => {
        observer.observe(el);
    });


    // ---------------------------------------------------------
    // 2. Mobile Menu Toggle
    // ---------------------------------------------------------
    const menuToggle = document.querySelector('.menu-toggle');
    const mobileMenu = document.querySelector('.mobile-menu');
    
    if (menuToggle && mobileMenu) {
        menuToggle.addEventListener('click', function() {
            mobileMenu.classList.toggle('open');
            // ÌñÑÎ≤ÑÍ±∞ ÏïÑÏù¥ÏΩò <-> X ÏïÑÏù¥ÏΩò ÌÜ†Í∏Ä 
            this.querySelector('i').classList.toggle('fa-bars');
            this.querySelector('i').classList.toggle('fa-times');
        });
    }

    // ---------------------------------------------------------
    // 3. Mobile Menu Link Click (Î©îÎâ¥ Îã´Í∏∞)
    // ---------------------------------------------------------
    document.querySelectorAll('.mobile-menu a').forEach(link => {
        link.addEventListener('click', () => {
            if (mobileMenu) mobileMenu.classList.remove('open');
            const toggleIcon = menuToggle ? menuToggle.querySelector('i') : null;
            if (toggleIcon) {
                toggleIcon.classList.remove('fa-times');
                toggleIcon.classList.add('fa-bars');
            }
        });
    });

    // ---------------------------------------------------------
    // 4. Contact Form Submission (Ìèº Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Î°úÏßÅ Ï∂îÍ∞Ä)
    // ---------------------------------------------------------
    const form = document.getElementById('contactForm');
    if (form) {
        const statusEl = document.getElementById('formStatus');
        
        // Ïñ∏Ïñ¥Î≥Ñ Î©îÏãúÏßÄ ÏÑ§Ï†ï (ÌèºÏùò _subject Í∞íÏúºÎ°ú ÌòÑÏû¨ Ïñ∏Ïñ¥ ÌôïÏù∏)
        const getFormMessages = (subject) => {
            if (subject.includes('(EN)')) {
                return { 
                    sending: 'Sending...', 
                    success: 'Message sent successfully! We will contact you shortly.', 
                    failure: 'Failed to send. Please try again later.', 
                    networkError: 'A network error occurred. Please try again.',
                    validationError: 'Please fill out all required fields correctly.'
                };
            } else if (subject.includes('(ZH)')) {
                return { 
                    sending: 'ÂèëÈÄÅ‰∏≠...', 
                    success: 'Ê∂àÊÅØÂ∑≤ÂèëÈÄÅÔºÅÊàë‰ª¨Â∞ÜÂ∞ΩÂø´‰∏éÊÇ®ËÅîÁ≥ªÔºÅ', 
                    failure: 'ÂèëÈÄÅÂ§±Ë¥•„ÄÇËØ∑Á®çÂêéÂÜçËØï„ÄÇ', 
                    networkError: 'ÂèëÁîüÁΩëÁªúÈîôËØØ„ÄÇËØ∑ÈáçËØï„ÄÇ',
                    validationError: 'ËØ∑Ê≠£Á°ÆÂ°´ÂÜôÊâÄÊúâÂøÖÂ°´Â≠óÊÆµ„ÄÇ'
                };
            } else { // KR (default)
                return { 
                    sending: 'Ï†ÑÏÜ° Ï§ë...', 
                    success: 'Î©îÏãúÏßÄÍ∞Ä Ï†ÑÏÜ°ÎêòÏóàÏäµÎãàÎã§. Í≥ß Ïó∞ÎùΩÎìúÎ¶¥Í≤åÏöî!', 
                    failure: 'Ï†ÑÏÜ°Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.', 
                    networkError: 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.',
                    validationError: 'ÌïÑÏàò Ìï≠Î™©ÏùÑ Î™®Îëê Ï†ïÌôïÌïòÍ≤å ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî.'
                };
            }
        };

        const setStatus = (msg) => {
            if (statusEl) statusEl.textContent = msg;
        };
        
        // Ïù¥Î©îÏùº Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Ìï®Ïàò (Í∞ÑÎã®ÌïòÍ≤å)
        const isValidEmail = (email) => {
            const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(String(email).toLowerCase());
        };

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const subjectInput = form.querySelector('input[name="_subject"]');
            const messages = getFormMessages(subjectInput ? subjectInput.value : '');

            // üåü Ìèº Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Î°úÏßÅ üåü
            const nameInput = document.getElementById('name');
            const emailInput = document.getElementById('email');
            const messageInput = document.getElementById('message');
            
            // ÌïÑÏàò Ìï≠Î™© ÌôïÏù∏
            if (nameInput.value.trim() === '' || emailInput.value.trim() === '' || messageInput.value.trim() === '') {
                setStatus(messages.validationError);
                return; // Ï†ÑÏÜ° Ï§ëÎã®
            }

            // Ïù¥Î©îÏùº ÌòïÏãù ÌôïÏù∏
            if (!isValidEmail(emailInput.value)) {
                setStatus(messages.validationError); 
                return; // Ï†ÑÏÜ° Ï§ëÎã®
            }
            // üåü Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Î°úÏßÅ ÎÅù üåü

            setStatus(messages.sending);

            try {
                const data = new FormData(form);
                const res = await fetch(form.action, {
                    method: 'POST',
                    body: data,
                    headers: { 'Accept': 'application/json' }
                });

                if (res.ok) {
                    form.reset();
                    setStatus(messages.success);
                } else {
                    let msg = messages.failure;
                    try {
                        const json = await res.json();
                        // Formspree Ïò§Î•ò Î©îÏãúÏßÄ Ï∂úÎ†• ÏãúÎèÑ
                        if (json && json.errors && json.errors.length) {
                            msg = json.errors.map(e => e.message).join(', ') || messages.failure;
                        }
                    } catch (_) {}
                    setStatus(msg);
                }
            } catch (err) {
                setStatus(messages.networkError);
            }
        });
    }

});
